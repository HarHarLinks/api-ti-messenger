@startuml
skinparam sequenceMessageAlign direction
skinparam WrapWidth 300
skinparam minClassWidth 150
skinparam BoxPadding 1
skinparam sequenceReferenceHeaderBackgroundColor palegreen
scale max 2048 width

skinparam sequence {
ArrowColor black
ArrowFontSize 17
ActorBorderColor black
LifeLineBorderColor black
LifeLineBackgroundColor Gainsboro

ParticipantBorderColor Motivation
ParticipantBackgroundColor Motivation
ParticipantFontSize 20
ParticipantFontColor black
ParticipantBorderColor Black
ParticipantBackgroundColor MOTIVATION

ActorBackgroundColor Gainsboro
ActorFontColor black
ActorFontSize 20
}

autonumber

actor oa as "Akteur in der Rolle\nOrg-Admin"
  box <size:19>Endgerät</size> #WhiteSmoke
  participant wb as "Frontend des \nRegistrierungs-Dienstes"
  participant au as "Authenticator"
  end box
participant ko as "Konnektor"
participant rd as "Registrierungs-Dienst \n Relying Party"
participant ip as "zentraler \nIDP-Dienst"


 activate wb
wb -> rd:POST I_Registration
 
 activate rd
rd->rd: Erzeuge PKCE Code \nfür verifier und challenge


 
          note right
  redirect_uri={registrierungs_dienst_redirect_uri} 
  state={SESSIONID}
  response_type=code
  client_id={Registrierungs-DienstID}
  code_challenge={registrierungs_dienst_code_challenge} 
  code_challenge_method=S256
  end note
 
        |||
          opt#LightGrey #AliceBlue <size:16>Download der Konfiguration des IDP-Dienstes</size>
          |||        
            rd -> ip:GET /.well-known/openid-configuration
            ip -> rd:openid-configuration (base64)
          |||
          end

          note right
Location: {Auth_Endpoint}
  end note


rd --> wb: Redirect to IDP Authorization Endpoint
 deactivate rd

        wb -> au: Deeplink \nauthenticator://?challenge_path=\nhttps://idp.app.ti-dienste.de/auth?
        activate au
        
          note left
  response_type=code
  client_id={Registrierungs-DienstID}
  scope=ti-messenger openid  
  redirect_uri={registrierungs_dienst_redirect_uri} 
  state={SESSION}
  code_challenge={tim_code_challenge} 
  code_challenge_method=S256
  end note
        
          opt#LightGrey #AliceBlue <size:16>Download der Konfiguration des IDP-Dienstes</size>
          |||        
            au -> ip:GET /.well-known/openid-configuration
            ip -> au:openid-configuration (base64)
          |||
          end
        
        
        au -> ip: GET {authorization_endpoint}
        activate ip
        ip -> ip: SESSION_ID anlegen
        ip -> ip: Erstellung der Authentication challenge
        
        
        ip -> au: Authentication challenge
        au -> ko: getCards(Aufrufkontext)
         activate ko
        ko --> au: Status, Liste der Verfügbaren Smartkarten
        au -> au: Auswahl der gesteckten SMC-B --> CardHandle
        au -> ko: GetPinStatus (Aufrufkontext, CardHandle, PinType (PIN.SMC))
        ko --> au: Status, PinStatus
          opt#LightGrey #AliceBlue <size:16>Karte nicht freigeschaltet </size>
          |||
            au -> ko: VerifyPin (Aufrufkontext, CardHandle, PinType (PIN.SMC))
            ko -> oa: Aufforderung der PIN-Eingabe
            oa -> ko: PIN-Eingabe
            ko -> au: Status
          |||
          end
        au -> ko: ExternalAuthenticate (Aufrufkontext, CardHandle, C.HCI.AUT, Authentication challenge)
        ko --> au: Signierte Authentication challenge
          deactivate ko
     
        au -> au: Verschlüsselung der signierten Authentication challenge mit dem \nöffentlichen Schlüssel PuK_IDP_ENC vom IDP-Dienst
        au -->ip: Authentication challenge, C.HCI.AUT der SMC-B übertragen
        ip -> ip: Entschlüsselung mit PuK_IDP_SIG des IDP-Dienstes \nund Valedierung der Signierten challenge anhand des \nim x5c-Header mitgelieferten Authentifizierungszertifikats
        ip -> ip: Erstellung des AUTHORIZATION_CODE
        ip --> au: AUTHORIZATION_CODE, redirect_uri={registrierungs_dienst_redirect_uri}
          deactivate ip
        au --> wb: AUTHORIZATION_CODE, redirect_uri={registrierungs_dienst_redirect_uri}
          deactivate au
        |||
        wb -> rd: GET /redirect_uri(AUTHORIZATION_CODE)
          activate rd
        rd -> rd: Erzeugung AES256-"Token-Key"
        rd -> rd: KEY_VERIFIE mit PUK_IDP_ENC verschlüsseln
        rd -> ip: GET {authorization_endpoint}(AUTHORIZATION_CODE, KEY_VERIFIE)
         activate ip
        ip -> ip: AUTHORIZATION_CODE entschlüsseln und \nValedierung mittels PUK_IDP_SIG Authorization-Endpunkte
        ip -> ip: Enzschlüsselung und Valedierung des KEY_VERIFIE
        ip -> ip: Erzeugung des ID_TOKEN und Signieren mittels PrK_IDP_SIG sowie Verschlüsselung mittels Token-Key
        ip --> rd: ID_TOKEN
         activate ip
        rd -> rd:  Entschlüsselung des Token mit Token-Key und Valedierung mit PUK_IDP_SIG

        
        
        
          
          
        rd -> ip: POST {token_endpoint}(auth_code, verifier)
          activate ip
        ip --> rd: id_token
          deactivate ip
@enduml
